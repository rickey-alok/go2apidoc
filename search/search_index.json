{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Go2APIDoc: Simplifying API Documentation","text":"<p>Go2APIDoc serves as a reference guide specifically focused on API documentation. It provides information and guidance in straightforward language, making it accessible even for writers new to API writing.</p> <p></p>"},{"location":"#api","title":"API","text":"<p>Let\u2019s start with the basics - What is an API? It\u2019s a fundamental question that sets the stage for your exploration.</p> <p>API</p>"},{"location":"#docs-as-code","title":"Docs-as-Code","text":"<p>In API documentation, you might have heard the word <code>Docs-as-Code</code>. What is this really? Basically, this approach involves creating documentation using the tools and processes that developers use for coding and collaboration. So, to be in the shoes of a developers, you must familiarize yourself with these below topics that will help you to get along in this API journey.</p> <p>One of the best things is that you no need to spend a single penny to access these software/tools as they are all open-source. So, I encourage you all to go ahead and download these below softwares to get some hands-on.</p> <p>VS Code Git &amp; GitHub Postman</p>"},{"location":"#key-topics-for-api-documentation","title":"Key Topics for API Documentation","text":"<p>As you embark on this API journey, consider exploring the following topics.</p> <p>Markdown  OAS cURL JSON</p>"},{"location":"JSR/","title":"API Reference","text":""},{"location":"JSR/#overview","title":"Overview","text":"<p>Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.</p>"},{"location":"JSR/#method","title":"Method","text":"<p><code>POST</code></p>"},{"location":"JSR/#base-url","title":"Base URL","text":"<pre><code>https://www.example.com\n</code></pre>"},{"location":"JSR/#endpoint","title":"Endpoint","text":"<pre><code>/Resources\n</code></pre>"},{"location":"JSR/#sample-request","title":"Sample Request","text":"HeadersRequest BodyParameters Key Value cnx-environment T2 cnx-correlationid 7c3eba71-e214-49f4-a0bb-1b2090351cc7 Content-Type application/json <p>Field Description</p> Attributes Type Description Default Value cnx-environment string An environment that is used by third parties for testing purposes. ------- cnx-correlationid ------- ------- ------- Content-Type ------- ------- ------- <pre><code>    {\n    \"orderId\": \"123456789\",\n    \"externalTripId\": \"abcdef123456\",\n    \"requestedBy\": \"Online\"\n    \"status\": \"Booked\"\n    }\n</code></pre> <p>Field Description</p> Attributes Type Description Default Value orderId <sup>*Required</sup> string Unique ID assigned to the order by cxLoyalty system. Note: To perform post-sale transactions on an existing order, you must generate a new transit code using this API. In order to do so, you must use the order ID that is returned when the order was created (using the Create Order API). 123456789 externalTripId string Unique ID assigned to the cruise booking by third-party system before the booking is confirmed. abcdef123456 requestedBy string Contains the username or the identifier for the user who has logged into the system. Online status enum contains enum values. <ul> <li>Booked</li> <li>Cancelled</li> <li>n/a</li></ul> Booked <p>this space is for formating purpose.     Ctrl+Alt+Del </p> Key Value"},{"location":"JSR/#sample-response","title":"Sample Response","text":"HeadersResponse Body Key Value Content-Type application/json <pre><code>{\n \"transitCode\": \"059eecb6-59e7-4aa4-986c-adf073b628dc\"\n}\n</code></pre>"},{"location":"API/apiComponents/","title":"API Components","text":"<ul> <li>Base URL</li> <li>Endpoints</li> <li>authentication</li> <li>authorization</li> <li>Method</li> <li>URL</li> <li>URI</li> <li>Resource</li> <li> <p>Error Codes</p> <ul> <li>HTTP Code</li> <li>API Error code</li> </ul> </li> </ul>"},{"location":"API/apiOverview/","title":"API","text":""},{"location":"API/apiOverview/#what-is-an-api","title":"What is an API?","text":"<ul> <li>API stands for - Application Programming Interface</li> <li>A set of protocols that allow different applications to communicate and exchange data.</li> </ul>"},{"location":"API/apiOverview/#why-do-we-use-it","title":"Why do we use it?","text":"<ul> <li>API helps to integrate the existing functionality with a new application.</li> <li>Avoid code to be written from scratch</li> <li>Helps in sharing data</li> </ul>"},{"location":"API/apiOverview/#how-it-works","title":"How it works?","text":"<p>An API explains the <code>WHAT</code> part, and not the <code>HOW</code> part to the users of the API. What do I mean by this?</p> <p>There is a famous analogy of a <code>Customer</code> visiting a restaurant and getting the food ordered from a <code>Waiter</code>. The <code>waiter</code> takes that request to a <code>Chef</code>. And when the food is ready, the <code>waiter</code> collects the ordered food from the <code>Chef</code> and delivered it to the <code>Customer</code>.</p> <p>Here <code>waiter</code> acts as an <code>API</code>, and the <code>customer</code> and <code>Chef</code> act as <code>Client</code> and <code>Server</code> respectively. The Customer can ask for customized food by asking the waiter but is not necessarily aware of the making of that dish. Similarly, when a client requests some resources from the server, the client can ask what it wants but is not aware of how the API works.</p> <p>Another example is when you hit any keyword for a search on google.com. What exactly happens? <code>You and your pc</code> act as a <code>Client</code>, and the keyword that you hit, act as a GET request to the Google server. And the results that are being displayed on the page act as a response. Here, you are only aware of the WHAT part, which means you're searching for something and get the result accordingly; but you don't need to know exactly how the search engine works.</p>"},{"location":"API/apiOverview/#types-of-apis","title":"Types of APIs","text":""},{"location":"API/apiOverview/#in-terms-of-architecture-style","title":"In terms of Architecture style","text":"<p>API exchanges data based on cearly defined <code>protocols</code> and <code>architectures</code> - the rules, structures, and constraints that govern an API's operation.</p> <p>There are 6 main categories of API <code>protocols</code> or <code>architectures</code>:</p>  REST or RESTful API <ul> <li>stands for REpresentational State Transfer (REST)<ul> <li>is a way for two machines to transfer the state of a resource via representations</li> <li>There are multiple representations such as JSON, HTML, text, etc.</li> </ul> </li> <li>this is the most popular API</li> <li> <p>6 constraints followed by RESTful APIs</p> <ol> <li>client/server<ul> <li>The client is someone who is requesting resources and is not concerned with data storage</li> <li>server is someone who holds the resources and is not concerned with the user interface or user state</li> </ul> </li> <li>stateless<ul> <li>The server will not store anything about the latest HTTP request the client made</li> <li>every request is treated as new</li> <li>No session, no history</li> </ul> </li> <li>Uniform Interface<ul> <li>A resource in the system should have only one logical URI, like naming conventions, link formats, or data format (XML or/and JSON)</li> <li>Naming conventions Example:<ul> <li> good example: <code>/api/users</code></li> <li> bad example: <code>/api?type=users</code></li> </ul> </li> </ul> </li> <li>caching<ul> <li>caching of data and responses is of utmost importance wherever they are applicable/possible.</li> <li>The webpage you are reading here is also a cached version of the HTML page.</li> <li>Caching brings performance improvement to the client side</li> <li>Caching can be implemented on the server or client side.</li> </ul> </li> <li>Layered<ul> <li>architecture where you deploy the APIs on server A, and store data on server B, and authenticate requests in Server C.</li> <li>for example. A client cannot ordinarily tell whether it is connected directly to the end server or an intermediary along the way</li> </ul> </li> <li>Code on Demand (optional)<ul> <li>Most of the time, you will be sending the static representations of resources in the form of XML or JSON</li> <li>But when you need to, you are free to return executable code to support a part of your application, e.g., clients may call your API to get a UI widget rendering code</li> </ul> </li> </ol> </li> </ul>  SOAP API <ul> <li>simple object access protocol</li> </ul>  RPC API <ul> <li>remote procedural call</li> </ul>  GraphQL <ul> <li>GraphQL</li> </ul>  WebSocket <ul> <li>WebSocket</li> </ul>  Webhook <ul> <li>Webhook</li> </ul>"},{"location":"API/apiOverview/#in-terms-of-consumer-usage","title":"In terms of Consumer usage","text":"<p>There are no differences from an implementation perspective for these APIs: - Private or Internal - Public or External - Partner</p>"},{"location":"API/apiUseCase/","title":"Use Case","text":""},{"location":"API/apiUseCase/#use-cases","title":"Use cases","text":"<p>Imagine you\u2019re developing a food delivery app similar to Zomato or Swiggy. You want to incorporate a map (using Google Maps) that displays the registered users\u2019 locations and the distance between their location and the restaurant once an order is placed. As the owner of the food delivery business, would you prefer spending time creating a map service from scratch, or would you opt for an existing solution like the Google Maps API and focus on your core business?</p> <p>In my view, it\u2019s evident that leveraging an established service is the way to go. And when it comes to mapping services, what would be better choice than utilizing the <code>Google Maps API</code> service?</p> <p>Now, let\u2019s explore how we can seamlessly integrate the Google Maps API into our app (or website).</p>"},{"location":"API/apiUseCase/#how-to-implement-an-api","title":"How to Implement an API?","text":"<p>Let\u2019s explore how to integrate Google Maps into your app. Whether you\u2019re building a travel app, a food delivery service, or any other application, leveraging the power of Google Maps can enhance user engagement and provide valuable location-based features.</p> <p>Here are the essential steps to integrate Google Maps into your app:</p> <ol> <li>Obtain a Google Maps API Key:<ol> <li>Before diving into programming specifics, you\u2019ll need to get an API key from Google. This key is unique to your application and allows Google to authenticate your app\u2019s requests. 2. Visit the Google Cloud Platform Console. 3. Create a new project or select an existing one. 4. Navigate to APIs &amp; Services -&gt; Credentials. 5. Click Create credentials -&gt; API key. 6. After creating, copy the API key for later use.</li> </ol> </li> <li>Back-End Development for Google Maps Integration<ol> <li>Google Maps integrations go beyond basic navigation. Whether you\u2019re building a location-based app, a delivery service, or a real estate platform, incorporating Google Maps into your application can significantly enhance user experience.</li> <li>To integrate Google Maps into your app on the backend, you\u2019ll need the Java client library for Google Maps API Web Services.</li> </ol> </li> <li>Front-End Integration (Web)<ol> <li>Generating custom map links to direct users to specific locations on maps.google.com..</li> <li>Using the Static Maps API to display non-interactive snapshots of locations.</li> </ol> </li> </ol> <p>Remember, Google Maps provides a wealth of features beyond basic mapping, including geocoding, directions, and places. Choose the integration approach that best suits your app\u2019s requirements, and unlock the world of location-based possibilities!</p>"},{"location":"API/apiUseCase/#google-map-api-integeration","title":"Google map API integeration","text":"<p>Below is an example showing how a google API is integrated in this page.</p> <pre><code>Ingetration map will come over here.\n</code></pre>"},{"location":"API/apiUseCase/#sample-api-creation-steps","title":"Sample API creation steps","text":"<p>We're going to create an api using NODE.js application. Node.JS runs on any operating system - such as Chrome, Firefox, Safari, Internet Explorer and so on. But for this project we will run in VS code editor, which also supports Node.JS.</p>"},{"location":"API/apiUseCase/#prerequisites","title":"Prerequisites","text":"<ol> <li>Install Node.Js application. Refer to Download Node.JS<ol> <li>Make sure to select LTS (long Term Support), and not the CURRENT version. LTS considered the more stable version and not grequently updated, but for the Current version it is other way around.</li> <li>Select Windows installer if you have windows installer.</li> <li>Follow the screen text to get the application downloaded.</li> <li>Once the application is donwloaded, opem command prompt, and just type node --version or node -v. you'll be presented with the installed version, something like v18.12.1 if the application is installed successfully.</li> </ol> </li> <li>Install VS code application.</li> </ol> <p>note:</p>"},{"location":"API%20Docs/JSON/","title":"JSON - Cheat sheet","text":""},{"location":"API%20Docs/JSON/#introduction","title":"Introduction","text":"<ul> <li>stands for JavaScript Object Notation</li> <li>easy to read and write.</li> <li>language agnostic data-interchange format</li> <li>filename extension is .json</li> <li>Internet Media type is application/json</li> </ul>"},{"location":"API%20Docs/JSON/#examples","title":"Examples","text":"<pre><code>{\n  \"name\": \"Jason\",                      //value is `string`\n  \"age\": 39,                            //value is `number`\n  \"height\": 1.92,                       //value is `number.fraction`\n  \"gender\": \"M\",                        //value is `string`\n  \"salary\": 70000,                      //value is `number`\n  \"married\": true,                      //value is `number`\n  \"children\": [                         //value is `array`\n    {\"name\": \"Tom\", \"age\": 9, \"gender\":\"M\"},\n    {\"name\": \"Ava\", \"age\": 7, \"gender\":\"F\"}\n  ]\n}\n</code></pre>"},{"location":"API%20Docs/JSON/#data-types","title":"Data Types","text":"Type Description String Series of characters Number Double precision floating-point Boolean true or false Array Ordered sequence of values Value String, Number, Boolean, null etc Object Unordered collection of key/value pairs null Null or Empty"},{"location":"API%20Docs/JSON/#string","title":"String","text":"Symbol Description <code>\"</code> Double quote <code>\\</code> Backslash <code>/</code> Forward slash <code>\\b</code> Backspace <code>\\f</code> Form feed <code>\\n</code> Newline <code>\\r</code> Carriage return <code>\\t</code> Tab <code>\\u</code> Trailed by four hex digits"},{"location":"API%20Docs/JSON/#number","title":"Number","text":"Type Description Integer Digits 1-9, 0 and positive or negative Fraction Fractions like 0.3, 3.9 Exponent Exponent like e, e+, e-, E, E+, E"},{"location":"API%20Docs/Markdown/","title":"Markdown - Cheat sheet","text":""},{"location":"API%20Docs/Markdown/#headings","title":"Headings","text":"<p>Input</p> <pre><code># H1\n\n## H2\n\n### H3\n\n#### H4\n\n##### H5\n\n###### H6\n\nHeader 1\n==========\n\nHeader 2\n-----------\n</code></pre> <p>Output</p> <pre><code># H1\n\n## H2\n\n### H3\n\n#### H4\n\n##### H5\n\n###### H6\n\n# Header 1\n\n## Header 2\n</code></pre>"},{"location":"API%20Docs/Markdown/#formatting","title":"Formatting","text":"<p><code>Normal</code> = Normal</p> <p><code>**Bold**</code> = Bold <code>__Bold__</code> = Bold</p> <p><code>*Italic*</code> = Italic <code>_Italic_</code> = Italic</p> <p><code>***Bold &amp; Italics***</code> = Bold &amp; Italics <code>___Bold &amp; Italics___</code> = Bold &amp; Italics</p> <p><code>Subscript example: H~2~O</code> = H<sub>2</sub>O</p> <p><code>Superscript example: X^2^</code> = X<sup>2</sup></p> <p><code>==Highlight==</code> = Highlight</p> <p><code>~~Strikethrough~~</code> = Strikethrough</p>"},{"location":"API%20Docs/Markdown/#emojis","title":"Emojis","text":"<p><code>:joy:</code> = \ud83d\ude02</p> <p><code>:smile:</code> = \ud83d\ude04</p> <p><code>:cry:</code> = \ud83d\ude22</p> <p><code>:tent:</code> = \u26fa\ufe0f</p> <p><code>:heart:</code> = \u2764\ufe0f</p> <p><code>:icecream:</code> = \ud83c\udf66</p> <p><code>:school:</code> = \ud83c\udfeb</p> <p><code>:car:</code> = \ud83d\ude97</p>"},{"location":"API%20Docs/Markdown/#list","title":"List","text":""},{"location":"API%20Docs/Markdown/#ordered-list","title":"Ordered list","text":"<p>Input</p> <pre><code>1. Item 1\n2. Item 2\n   1. Item 2.1\n      1. Item 2.1.a\n      2. Item 2.1.b\n</code></pre> <p>Output</p> <ol> <li>Item 1</li> <li>Item 2</li> <li>Item 2.1<ol> <li>Item 2.1.a</li> <li>Item 2.1.b</li> </ol> </li> </ol>"},{"location":"API%20Docs/Markdown/#unordered-list","title":"Unordered list","text":"<p>Input</p> <pre><code>- Item 1\n- Item 2\n  - second level 1\n    - third level\n  - second level 2\n    - third level\n</code></pre> <p>Output</p> <ul> <li>Item 1</li> <li>Item 2</li> <li>second level 1<ul> <li>third level</li> </ul> </li> <li>second level 2<ul> <li>third level</li> </ul> </li> </ul>"},{"location":"API%20Docs/Markdown/#task-list","title":"Task List:","text":"<p>Input</p> <pre><code>- [ ] Checkbox off\n- [x] Checkbox on\n</code></pre> <p>Output</p> <ul> <li> Checkbox off</li> <li> Checkbox on</li> </ul> <p>Miscellaneous</p> <p>Input</p> <pre><code>term\n: definition\n</code></pre> <p>Output</p> term definition"},{"location":"API%20Docs/Markdown/#code","title":"Code","text":""},{"location":"API%20Docs/Markdown/#inline-code","title":"Inline Code","text":"<p>Input</p> <pre><code>`code`\n</code></pre> <p>Output</p> <p><code>code</code></p>"},{"location":"API%20Docs/Markdown/#block-code","title":"Block Code","text":""},{"location":"API%20Docs/Markdown/#json","title":"JSON","text":""},{"location":"API%20Docs/Markdown/#code-block-with-json-keyword","title":"Code block with JSON keyword","text":"<p>Input</p> <pre><code>```JSON\n{\n  \"firstName\": \"John\",\n  \"lastName\": \"Smith\",\n  \"age\": 25\n}\n```\n</code></pre> <p>Output</p> <pre><code>{\n  \"firstName\": \"John\",\n  \"lastName\": \"Smith\",\n  \"age\": 25\n}\n</code></pre>"},{"location":"API%20Docs/Markdown/#code-block-without-json-keyword","title":"Code block without JSON keyword","text":"<p>Input</p> <pre><code>```\n{\n  \"firstName\": \"John\",\n  \"lastName\": \"Smith\",\n  \"age\": 25\n}\n```\n</code></pre> <p>Output</p> <pre><code>{\n  \"firstName\": \"John\",\n  \"lastName\": \"Smith\",\n  \"age\": 25\n}\n</code></pre>"},{"location":"API%20Docs/Markdown/#links","title":"Links","text":""},{"location":"API%20Docs/Markdown/#external-reference","title":"External reference","text":"<p>Input</p> <pre><code>[Google](https://www.google.com)\n</code></pre> <p>Output</p> <p>Google</p> <p>Input</p> <pre><code>[Google](https://www.google.com \"Google Home Page\")\n</code></pre> <p>Output</p> <p>Google</p> <p>Input</p> <pre><code>&lt;https://google.com&gt;\n</code></pre> <p>Output</p> <p>https://google.com</p>"},{"location":"API%20Docs/Markdown/#internal-reference","title":"Internal Reference","text":"<p>Input</p> <pre><code>[Linked to readme page](## \"link\")\n</code></pre> <p>Output</p> <p>Linked to readme page</p>"},{"location":"API%20Docs/Markdown/#images","title":"Images","text":""},{"location":"API%20Docs/Markdown/#external-reference_1","title":"External reference","text":"<p>Input</p> <pre><code>![water](https://media.istockphoto.com/photos/underwater-bubbles-picture-id925440650?k=20&amp;m=925440650&amp;s=612x612&amp;w=0&amp;h=OYU-poM2bI0xYJvb8qRAQ5UCc3qvnYt91KNv4nCOjgY=)\n</code></pre> <p>Output</p> <p></p>"},{"location":"API%20Docs/Markdown/#internal-reference_1","title":"Internal Reference","text":"<p>Input</p> <pre><code>![git-logo](../img/git-logo.png)\n</code></pre> <p>Output</p> <p></p>"},{"location":"API%20Docs/Markdown/#table","title":"Table","text":""},{"location":"API%20Docs/Markdown/#alignment","title":"Alignment","text":"<p>You can align text in the columns to the left, right, or center by adding a colon <code>:</code> to the left, right, or on both side of the hyphens within the header row.</p> Syntax Description Test Text Text Left Aligned Text Center Aligned Text Right Aligned"},{"location":"API%20Docs/Markdown/#blockquote","title":"Blockquote","text":"<p>Input</p> <pre><code>&gt; This is\n&gt; a blockquote\n&gt;\n&gt; &gt; Nested\n&gt; &gt; Blockquote\n</code></pre> <p>Output</p> <p>This is a blockquote</p> <p>Nested Blockquote</p>"},{"location":"API%20Docs/Markdown/#horizontal-rule","title":"Horizontal Rule","text":"<p>Input</p> <pre><code>Three or more\n\n--- (Hyphens) or *** (Asterisks) or ___ (Underscores)\n</code></pre> <p>Output</p>"},{"location":"API%20Docs/Markdown/#footnote","title":"Footnote","text":"<p>Input</p> <pre><code>Here's a sentence with a footnote. [^1]\n\n[^1]: This is the footnote.\n</code></pre> <p>Output</p> <p>Here's a sentence with a footnote. [^1]</p> <p>[^1]: This is the footnote.</p>"},{"location":"API%20Docs/Markdown/#markdown-in-html","title":"Markdown in HTML","text":"<p>Does not work very well. Use HTML tags.</p>"},{"location":"API%20Docs/Miscellaneous/","title":"Miscellaneous","text":""},{"location":"API%20Docs/Miscellaneous/#grouping-code-blocks","title":"Grouping code blocks","text":"CC++ <pre><code>#include &lt;stdio.h&gt;\n\nint main(void) {\n  printf(\"Hello world!\\n\");\n  return 0;\n}\n</code></pre> <pre><code>#include &lt;iostream&gt;\n\nint main(void) {\n  std::cout &lt;&lt; \"Hello world!\" &lt;&lt; std::endl;\n  return 0;\n}\n</code></pre>"},{"location":"API%20Docs/Miscellaneous/#grouping-other-content","title":"Grouping other content","text":"Unordered listOrdered list <ul> <li>Sed sagittis eleifend rutrum</li> <li>Donec vitae suscipit est</li> <li>Nulla tempor lobortis orci</li> </ul> <ol> <li>Sed sagittis eleifend rutrum</li> <li>Donec vitae suscipit est</li> <li>Nulla tempor lobortis orci</li> </ol>"},{"location":"API%20Docs/Miscellaneous/#embedded-content","title":"Embedded content","text":"<p>Example</p> Unordered ListOrdered List <pre><code>* Sed sagittis eleifend rutrum\n* Donec vitae suscipit est\n* Nulla tempor lobortis orci\n</code></pre> <pre><code>1. Sed sagittis eleifend rutrum\n2. Donec vitae suscipit est\n3. Nulla tempor lobortis orci\n</code></pre>"},{"location":"API%20Docs/Miscellaneous/#using-annotations","title":"Using annotations","text":"<p>Lorem ipsum dolor sit amet, (1) consectetur adipiscing elit.</p> <ol> <li>:man_raising_hand: I'm an annotation! I can contain <code>code</code>, formatted     text, images, ... basically anything that can be expressed in Markdown.</li> </ol>"},{"location":"API%20Docs/Miscellaneous/#heading2","title":"heading2","text":"Tab 1Tab 2 <p>Lorem ipsum dolor sit amet, (1) consectetur adipiscing elit.</p> <ol> <li>:man_raising_hand: I'm an annotation!</li> </ol> <p>Phasellus posuere in sem ut cursus (1)</p> <ol> <li>:woman_raising_hand: I'm an annotation as well!</li> </ol>"},{"location":"API%20Docs/Miscellaneous/#note","title":"note","text":"<p>Note</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod   nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor   massa, nec semper lorem quam in massa.</p>"},{"location":"API%20Docs/OepnAPISpec/","title":"OpenAPI Specification","text":""},{"location":"API%20Docs/OepnAPISpec/#what-is-openapi","title":"What Is OpenAPI?","text":"<ul> <li>It is a broadly adopted industry standard or specification for describing RESTful API, which can be written in YAML or JSON format.</li> <li>The other two specifications used for describing RESTful API are </li> <li>RAML </li> <li>Written in YAML format</li> <li>API Blueprint</li> <li>Written in Markdown format</li> </ul>"},{"location":"API%20Docs/OepnAPISpec/#advantage-using-openapi","title":"Advantage using OpenAPI","text":"<ul> <li>Understand by machines and humans.</li> <li>one can generate both server and client code in any programming language.</li> <li>use mock servers to provide example responses which enable both consumers and producers to start development at a same time.</li> <li>can perform the validation in both direction</li> </ul>"},{"location":"API%20Docs/OepnAPISpec/#open-api-structure","title":"Open API Structure","text":"<p>OpenAPI Map</p> <ol> <li>openapi <code>string</code> <code>required</code> - The openapi field SHOULD be used by tooling specifications and clients to interpret the OpenAPI document. This is not related to the API info.version string.</li> </ol> <pre><code>{\n  \"openapi\": \"3.0.0\",\n}\n</code></pre> <pre><code>{\n  \"swagger\": \"2.0\",\n}\n</code></pre> <ol> <li> <p>info (6) <code>required</code> - Provides metadata about the API. The metadata MAY be used by tooling as required.</p> </li> <li> <p>title <code>required</code></p> </li> <li>description</li> <li>termsOfService</li> <li>contact<ul> <li>name</li> <li>url</li> <li>email</li> </ul> </li> <li>license<ul> <li>name <code>required</code></li> <li>url</li> </ul> </li> <li>version <code>required</code></li> </ol> <pre><code>{\n  \"title\": \"Sample Pet Store App\",\n  \"description\": \"This is a sample server for a pet store.\",\n  \"termsOfService\": \"http://example.com/terms/\",\n  \"contact\": {\n    \"name\": \"API Support\",\n    \"url\": \"http://www.example.com/support\",\n    \"email\": \"support@example.com\"\n  },\n  \"license\": {\n    \"name\": \"Apache 2.0\",\n    \"url\": \"https://www.apache.org/licenses/LICENSE-2.0.html\"\n  },\n  \"version\": \"1.0.1\"\n}\n</code></pre> <ol> <li> <p>servers (3) - If the servers property is not provided, or is an empty array, the default value would be a Server Object with a url value of /.</p> </li> <li> <p>url <code>required</code></p> </li> <li>description</li> <li> <p>variables</p> <ul> <li>enum</li> <li>default <code>required</code></li> <li>description</li> </ul> <p>A single server would be described as:</p> <pre><code>{\n  \"url\": \"https://development.gigantic-server.com/v1\",\n  \"description\": \"Development server\"\n}\n</code></pre> <p>multiple servers can be described</p> <pre><code>      {\n        \"servers\": [\n          {\n            \"url\": \"https://development.gigantic-server.com/v1\",\n            \"description\": \"Development server\"\n          },\n          {\n            \"url\": \"https://staging.gigantic-server.com/v1\",\n            \"description\": \"Staging server\"\n          },\n          {\n            \"url\": \"https://api.gigantic-server.com/v1\",\n            \"description\": \"Production server\"\n          }\n        ]\n      }\n</code></pre> <p>variables can be used for a server configuration</p> <pre><code>      {\n        \"servers\": [\n          {\n            \"url\": \"https://{username}.gigantic-server.com:{port}/{basePath}\",\n            \"description\": \"The production API server\",\n            \"variables\": {\n              \"username\": {\n                \"default\": \"demo\",\n                \"description\": \"this value is assigned by the service provider, in this example `gigantic-server.com`\"\n              },\n              \"port\": {\n                \"enum\": [\n                  \"8443\",\n                  \"443\"\n                ],\n                \"default\": \"8443\"\n              },\n              \"basePath\": {\n                \"default\": \"v2\"\n              }\n            }\n          }\n        ]\n      }\n</code></pre> </li> <li> <p>paths <code>reqired</code> - The available paths and operations for the API.</p> </li> <li> <p>Path Item (13) - A relative path to an individual endpoint. The field name MUST begin with a forward slash (/)</p> <ul> <li>$ref</li> <li>summary</li> <li>description</li> <li>get <code>Operation Object</code></li> <li>put <code>Operation Object</code></li> <li>post <code>Operation Object</code></li> <li>delete <code>Operation Object</code></li> <li>options <code>Operation Object</code></li> <li>head <code>Operation Object</code></li> <li>patch <code>Operation Object</code></li> <li>trace <code>Operation Object</code></li> <li>servers</li> <li> <p>parameters (4) (There are four possible parameter locations specified by the <code>in</code> field:)</p> </li> <li> <p>path</p> </li> <li>query</li> <li>header</li> <li>cookie</li> </ul> <p></p> </li> <li> <p>components (9) - An element to hold various schemas for the specification.</p> </li> <li> <p>schemas</p> <ul> <li>Type</li> <li>Format</li> </ul> </li> <li> <p>responses The Responses Object MUST contain at least one response code, and it SHOULD be the response for a successful operation call.</p> <ul> <li>description <code>required</code></li> <li> <p>headers</p> </li> <li> <p>content</p> </li> <li>links</li> </ul> <pre><code>{\n  \"200\": {\n    \"description\": \"a pet to be returned\",\n    \"content\": {\n      \"application/json\": {\n        \"schema\": {\n          \"$ref\": \"#/components/schemas/Pet\"\n        }\n      }\n    }\n  }\n }\n</code></pre> </li> <li> <p>parameters</p> </li> <li>examples</li> <li>requestBodies<ul> <li>description</li> <li>content</li> <li>required</li> </ul> </li> <li>headers</li> <li>securitySchemes</li> <li>links<ul> <li>operationRef</li> <li>operationId</li> <li>parameters</li> <li>requestBody</li> <li>description</li> <li>server</li> </ul> </li> <li> <p>callbacks</p> </li> <li> <p>security - A declaration of which security mechanisms can be used across the API.</p> </li> <li>{name} - Each name MUST correspond to a security scheme which is declared in the Security Schemes under the Components Object.</li> <li> <p>tags - A list of tags used by the specification with additional metadata.</p> </li> <li> <p>name</p> </li> <li>description</li> <li>externalDocs - Additional external documentation.<ul> <li>description</li> <li>url</li> </ul> </li> </ol> <pre><code>        {    \"tags\":\n              [\n                          {\"name\": \"pet\",\n                           \"description\": \"Everything about your Pets\",\n                           \"externalDocs\": {\n                                            \"description\": \"Find out more\",\n                                            \"url\": \"http://swagger.io\"}\n                          },\n                          {\"name\": \"store\",\n                           \"description\": \"Access to Petstore orders\"\n                           },\n                          {\"name\": \"user\",\n                           \"description\": \"Operations about user\",\n                            \"externalDocs\": {\n                                          \"description\": \"Find out more about our store\"\n                                          \"url\": \"http://swagger.io\"}\n                        }\n              ]\n         }\n</code></pre>"},{"location":"API%20Docs/OepnAPISpec/#difference-between-20-and-30","title":"Difference between 2.0 and 3.0","text":""},{"location":"API%20Docs/OepnAPISpec/#object-flows","title":"Object Flows","text":""},{"location":"API%20Docs/cURL/","title":"CURL - Cheat sheet","text":""},{"location":"API%20Docs/cURL/#request","title":"Request","text":"<pre><code>-X POST          # --request\n-L               # follow link if page redirects\n-F               # --form: HTTP POST data for multipart/form-data\n</code></pre>"},{"location":"API%20Docs/cURL/#data","title":"Data","text":"<pre><code>-d 'data'    # --data: HTTP post data, URL encoded (eg, status=\"Hello\")\n-d @file     # --data via file\n-G           # --get: send -d data via get\n</code></pre>"},{"location":"API%20Docs/cURL/#headers","title":"Headers","text":"<pre><code>-A &lt;str&gt;         # --user-agent\n-b name=val      # --cookie\n-b FILE          # --cookie\n-H \"X-Foo: y\"    # --header\n--compressed     # use deflate/gzip\n</code></pre>"},{"location":"API%20Docs/cURL/#options","title":"Options","text":"<pre><code>-o &lt;file&gt;    # --output: write to file\n-u user:pass # --user: Authentication\n\n-i           # --include: Include the HTTP-header in the output\n-I           # --head: headers only\n</code></pre>"},{"location":"API%20Docs/cURL/#examples","title":"Examples","text":""},{"location":"API%20Docs/cURL/#web-browsing","title":"Web Browsing","text":"<p>Fetch HTTP headers</p> <pre><code>curl --head \"https://example.com\"\n</code></pre> <p>List contents of a directory</p> <pre><code>curl --list-only \"https://example.com/foo/\"\n</code></pre> <p>Redirect query as specified by a 3xx response</p> <pre><code>curl --location \"https://iana.org\"\n</code></pre> <p>Check whether a site is down</p> <pre><code>curl --head --show-error \"http://example.com\"\n</code></pre> <p>Expand a shortened URL</p> <pre><code>curl --head --location \"https://bit.ly/2yDyS4T\"\n</code></pre>"},{"location":"API%20Docs/cURL/#downloading-files","title":"Downloading files","text":"<p>Download a file, saving the file without changing its name</p> <pre><code>curl --remote-name \"https://example.com/linux-distro.iso\"\n</code></pre> <p>Rename the file</p> <pre><code>curl --remote-name \"http://example.com/index.html\" --output foo.html\n</code></pre> <p>Continue a partial download</p> <pre><code>curl --remote-name --continue-at - \"https://example.com/linux-distro.iso\"\n</code></pre> <p>Download a file from multiple domains</p> <pre><code>curl \"https://www.{example,w3,iana}.org/index.html\" --output \"file_#1.html\"\n</code></pre> <p>Download a sequence of files (outputs foo_file1.webp, foo_file2.webp...bar_file1_webp, etc)</p> <pre><code>curl \"https://{foo,bar}.com/file_[1-4].webp\" --output \"#1_#2.webp\"\n</code></pre> <p>Download a sequence of files (outputs foo_file1.webp, foo_file2.webp...bar_file1_webp, etc)</p> <pre><code>curl \"https://{foo,bar}.com/file_[1-4].webp\" --output \"#1_#2.webp\"\n</code></pre> <p>Download all PNG files from a site (uses GNU grep)</p> <pre><code>curl https://example.com | grep --only-matching 'src=\"[^\"]*.[png]\"' | \\\ncut -d\\\" -f2 | \\\nwhile read i; do curl https://example.com/\"${i}\" -o \"${i##*/}\"; done\n</code></pre>"},{"location":"API%20Docs/cURL/#api-interaction","title":"API interaction","text":"<p>Query an API endpoint</p> <pre><code>curl \"https://gitlab.com/api/v4/projects\"\n</code></pre> <p>Send raw data to an API endpoint</p> <pre><code>curl --data \"Some data\" \"https://example.com/api/v4/endpoint\"\n</code></pre> <p>Send form data (emulates a form and Submit button)</p> <pre><code>curl --form \"username=seth\" --form \"password=12345678\" \\\n\"https://example.com/api/v4/endpoint\"\n</code></pre> <p>Send a file as form data (uses the @ syntax)</p> <pre><code>curl --form \"profile=@me.jpg\" \"https://example.com/foo/bar\"\n</code></pre> <p>Send contents of a file as form data (uses the &lt; syntax)</p> <pre><code>curl --form \"description=&lt;file.md\" \"https://example.com/foo/bar\"\n</code></pre> <p>Send HTTP header data (for example, an authorization token)</p> <pre><code>curl --header \"Authorization: Bearer F66eD5ffXHp2Y\" \\\n\"https://example.com/api/v4/endpoint\"\n</code></pre> <p>Specify HTTP Method</p> <pre><code>curl --request POST --data \"Foo: bar\" \"https://example.com/api/endpoint\"\n</code></pre> <p>Make an API call to a service</p> <pre><code>curl --request PUT --header \"PRIVATE-TOKEN: your_access_token_here\" \\\n--data \"?per_page=10\" \"https://gitlab.com/api/v4/namespaces\"\n</code></pre>"},{"location":"API%20Docs/cURL/#notes","title":"Notes","text":"<p>If you\u2019re using Windows, note the following formatting requirements when using curl:</p> <ul> <li>Use double quotes in the Windows command line. (Windows doesn\u2019t support single quotes.)</li> <li>Don\u2019t use backslashes <code>(\\)</code> to separate lines. (This is for readability only and doesn\u2019t affect the call on Macs.)</li> <li>By adding <code>-k</code> in the curl command, you can bypass curl\u2019s security certificate, which may or may not be necessary.</li> </ul> <p>Source [^1]</p> <p>[^1]: From www.opensource.com</p>"},{"location":"Docs-as-Code/Git-GitHub/","title":"Git &amp; GitHub","text":"<p>Essential for version control and collaborative development</p>"},{"location":"Docs-as-Code/Git-GitHub/#git","title":"Git","text":""},{"location":"Docs-as-Code/Git-GitHub/#what-is-git","title":"What is Git?","text":"<ul> <li> <p>an open source</p> <ul> <li>so it is free to use and developers can modify the source code to suit their needs</li> </ul> </li> <li> <p>distributed version-control system, for software development mainly</p> <ul> <li>meaning there is no central point of control</li> <li>every computer is a full-fledged repository with complete history and full version-tracking abilities</li> </ul> </li> <li> <p>but not a programming language</p> </li> <li>developed by Linus Torvalds in 2005</li> </ul>"},{"location":"Docs-as-Code/Git-GitHub/#why-do-we-use-git","title":"Why do we use Git?","text":"<ul> <li> <p>Collaboration</p> <ul> <li>allows multiple developers to work on the same project at the same time without interfering with one another</li> </ul> </li> <li> <p>Branching</p> <ul> <li>allows developers to create branches of a project, so they can make changes without affecting the main version of the project</li> </ul> </li> <li> <p>Speed</p> <ul> <li>fast and efficient system which allows developers to work quickly and seamlessly on projects</li> </ul> </li> <li> <p>Security</p> <ul> <li>uses encryption to secure data transfer and storage, which helps keep sensitive information safe</li> </ul> </li> </ul>"},{"location":"Docs-as-Code/Git-GitHub/#github","title":"GitHub","text":""},{"location":"Docs-as-Code/Git-GitHub/#what-is-github","title":"What is GitHub?","text":"<ul> <li>A platform for code hosting and collaborating on projects using git</li> <li>It serves as a location for uploading copies of a Git repository</li> </ul>"},{"location":"Docs-as-Code/Git-GitHub/#why-do-we-use-github","title":"Why do we use GitHub?","text":"<ul> <li>makes it easy for developers to share code files and collaborate with fellow developers</li> <li>also serves as a social networking site where developers can openly network, collaborate, and pitch their work</li> </ul>"},{"location":"Docs-as-Code/Git-GitHub/#git-and-github-workflow","title":"Git and GitHub workflow","text":"<p>At first, I use to struggle to grasp the intricacies of Git and GitHub workflows via command lines. Despite encountering numerous resources available on the internet that discussed these activities, their explanations remained unclear. So, I decided to simplify the process. After using these commands extensively, I created a visual workflow that explains the purpose of each command and makes them easier to remember.</p>"},{"location":"Docs-as-Code/Git-GitHub/#git-commands","title":"Git Commands","text":"<p>Git offers a plethora of commands, but some are used only occasionally (One time commands) \u2014 when setting up our IDE and some are used Frequently as part of our daily work routine.</p>"},{"location":"Docs-as-Code/Git-GitHub/#one-time-commands","title":"One time commands","text":"<ul> <li>[git init] - initialize an existing directory as a Git repository</li> <li>[git config --global user.email \"xyz@gmail.com\"] - set an email address that will be associated with each history marker</li> <li>[git config --global user.name \"yourName\"] - set a name that is identifiable for credit when review version history</li> <li>[git remote add origin \"url - http or SHH\"] - add a remote repository</li> <li>[git clone \"url - http or SHH\"] - retrieve an entire repository from a hosted location via URL</li> </ul>"},{"location":"Docs-as-Code/Git-GitHub/#frequently-used-commands","title":"Frequently used commands","text":"<ul> <li>[git status] -  show modified files in working directory, staged for your next commit</li> <li>[git log] -  show the commit history for the currently active branch</li> <li>[git add -A] -  stages all files</li> <li>[git add .] -  stages modified and NEW files, without DELETED file</li> <li>[git add -u] -  stages modified and DELETED files, without NEW file</li> <li>[git commit -m \"message\"] -  commit your staged content as a new commit snapshot</li> <li>[git commit -am \"message\"] -  `stage and commit` your new commit snapshot</li> <li>[git diff] -  diff of what is changed but not staged</li> <li>[git diff --staged] -  diff of what is staged but not yet commited</li> <li>[git diff head] -  diff of what is changed but not commited</li> <li>[git branch] -  list your branches. a \\* will appear next to the currently active branch</li> <li>[git checkout] -  switch to another branch and check it out into your working directory</li> <li>[git push remote branch1 or just - git push] -  Transmit local branch commits to the remote repository branch</li> <li>[git pull remote branch1 or just - git pull] -  fetch and merge any commits from the tracking remote branch</li> <li>[git fetch] -  fetch down all the branches from that Git remote</li> <li>[git merge branch1] -  merge a remote branch into your current branch to bring it up to date</li> <li>[git rebase Master] -  apply any commits of current branch ahead of specified one</li> </ul>"},{"location":"Docs-as-Code/Postman/","title":"Postman","text":"<p>Simplify API testing and collaboration</p> <p>Postman is an application that allows the testing of web APIs. The software was created in 2012 by Abhinav Asthana, Ankit Sobti and Abhijit Kane in Bangalore, India in order to solve the API tests sharing problem. Originally, it was developed as a plugin for Google Chrome, then a rich client, and finally a thin client.</p>"},{"location":"Docs-as-Code/VS-Code/","title":"VS Code","text":"<p>A versatile code editor that developers love.</p> <p>VS code, also known as Visual Studio Code, is a lightweight and powerful open-source code editor by Microsoft. It is prevalent amongst the developer community to build and debug applications.</p> <p>It supports almost all sorts of programming languages for building applications, which makes it a super-friendly Integrated Development Environment (IDE) for developers. Yet, many extensions are available for writers that help in formatting content or auto syntax correction, which elevates writers productivity.</p> <p>VS code also integrates well with the Git and GitHub which makes collaboration easier and faster.</p>"}]}